name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11']
        exclude:
          # Exclui algumas combinações para otimizar tempo de build
          - os: windows-latest
            python-version: 3.8
          - os: macos-latest
            python-version: 3.8

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock
        pip install streamlit pandas
        # Instala dependências do projeto se requirements.txt existir
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash
    
    - name: Create directory structure
      run: |
        mkdir -p paginas
        touch paginas/__init__.py
        touch paginas/__init__.py
      shell: bash
    
    - name: Lint with flake8 (optional)
      run: |
        pip install flake8
        # Para de executar se houver erros de sintaxe ou nomes indefinidos
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Para avisos, usa configuração mais flexível
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        pytest test_cardapio.py -v --cov=cardapio --cov=paginas --cov-report=xml --cov-report=html
      env:
        PYTHONPATH: .
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest streamlit pandas
    
    - name: Create directory structure
      run: |
        mkdir -p paginas
    
    - name: Run integration tests
      run: |
        # Teste de integração básico - verifica se módulos podem ser importados
        python -c "
        import sys
        sys.path.append('.')
        try:
            from cardapio import carregar_pedidos, salvar_pedido
            print('✓ Módulo cardapio importado com sucesso')
        except ImportError as e:
            print(f'✗ Erro ao importar cardapio: {e}')
            sys.exit(1)
        
        try:
            from paginas.pedido import pedido_page
            print('✓ Módulo pedido importado com sucesso')
        except ImportError as e:
            print(f'✗ Erro ao importar pedido: {e}')
            sys.exit(1)
        
        print('✓ Todos os módulos foram importados com sucesso!')
        "

  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
      continue-on-error: true
    
    - name: Check for known security vulnerabilities
      run: |
        pip install streamlit pandas pytest
        safety check || true
      continue-on-error: true